name: Nightly Build

on:
  push:
    branches: [main]

jobs:
  determine-deployment:
    name: Determine Deployment Destination
    runs-on: ubuntu-latest
    outputs:
      deploy_target: ${{ steps.set-target.outputs.deploy_target }}
      tag: ${{ steps.get-latest-tag.outputs.tag }}

    steps:
      - name: Checkout Source Repo
        uses: actions/checkout@v4
        with:
          repository: ccrawford4/devops-midterm-source
          fetch-tags: true

      - name: Get Latest Tag
        id: get-latest-tag
        run: echo "tag=$(git tag --list --sort=-v:refname | head -n 1)" >> $GITHUB_OUTPUT

      - uses: actions-ecosystem/action-regex-match@v2
        id: regex-match
        with:
          text: ${{ steps.get-latest-tag.outputs.tag }}
          regex: 'v[0-9]*.[0-9][0-9]-rc[0-9]*'

      - name: Determine ECR Repository
        id: set-target
        run: |
          if [[ "${{ steps.regex-match.outputs.match }}" == "true" ]]; then
            echo "Using RC ECR Repository"
            echo "deploy_target=qa" >> $GITHUB_OUTPUT
          else
            echo "Using QA ECR Repository"
            echo "deploy_target=rc" >> $GITHUB_OUTPUT
          fi

  smoke_test:
    name: Smoke Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Infra Repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install boto3 paramiko requests

      - name: Launch EC2 instance and run tests
        id: ec2-deploy
        run: |
          python smoke_test.py
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
          EC2_SSH_KEY: ${{ secrets.EC2_PEM }}
          LAUNCH_TEMPLATE_ID: ${{ secrets.LAUNCH_TEMPLATE_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          EC2_USER: ${{ secrets.EC2_USER }}
          HEALTH_CHECK_URL: ${{ secrets.HEALTH_CHECK_URL }}
          SOURCE_REPO: ${{ secrets.SOURCE_REPO }}

  push-to-ecr:
    needs: [smoke_test, determine-deployment]
    name: Build Docker Images and Push to ECR
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source Repo
        uses: actions/checkout@v4
        with:
          repository: ccrawford4/devops-midterm-source

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push Docker images
        env:
          ECR_REPOSITORY: ${{ needs.determine-deployment.outputs.deploy_target == 'rc' && secrets.RC_ECR_REPOSITORY_URI || secrets.QA_ECR_REPOSITORY_URI }}
          TAG: ${{ needs.determine-deployment.outputs.tag }}
        run: |
          for service in frontend backend; do
            cd $service
            docker build -t $service .

            docker tag $service $ECR_REPOSITORY:$service-$TAG
            docker tag $service $ECR_REPOSITORY:$service-latest

            docker push $ECR_REPOSITORY:$service-$TAG
            docker push $ECR_REPOSITORY:$service-latest
            cd ..
          done

  deploy:
    needs: [push-to-ecr, determine-deployment]
    name: Deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Infra Repo
        uses: actions/checkout@v4

      - name: Run Deploy Script
        env:
          EC2_HOST: ${{ needs.determine-deployment.outputs.deploy_target == 'rc' && secrets.RC_EC2_HOST || secrets.QA_EC2_HOST }}
          ECR_REPOSITORY: ${{ needs.determine-deployment.outputs.deploy_target == 'rc' && secrets.RC_ECR_REPOSITORY_URI || secrets.QA_ECR_REPOSITORY_URI }}
        run: |
          chmod +x ./run.sh
          ./run.sh "${{ secrets.EC2_PEM }}" \
                  "${{ secrets.EC2_USER }}" \
                  "$EC2_HOST" \
                  "${{ secrets.AWS_ACCESS_KEY_ID }}" \
                  "${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
                  "${{ secrets.AWS_SESSION_TOKEN }}" \
                  "${{ secrets.AWS_REGION }}" \
                  "$EC2_REPOSITORY" \
                  "${{ secrets.DB_DSN }}"
